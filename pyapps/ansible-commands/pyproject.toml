[project.scripts]
  tkeeper = "python -m ansible_commands"

[tool.coverage.run]
  branch = true
  source = ["ansible_commands"]

[tool.coverage.report]
  exclude_lines = ["if TYPE_CHECKING:"]
  show_missing = true

[tool.nx]
  autoactivate = true
  autoinstall = true

[tool.pytest.ini_options]
  addopts = "--cov --cov-report html:'../../coverage/pyapps/ansible-commands/html' --cov-report xml:'../../coverage/pyapps/ansible-commands/coverage.xml' --html='../../reports/pyapps/ansible-commands/unittests/html/index.html' --junitxml='../../reports/pyapps/ansible-commands/unittests/junit.xml'"

[tool.poetry]
  authors = ["Jeremy Hettenhouser"]
  description = "Automatically generated by Nx."
  license = "MIT"
  name = "ansible-commands"
  readme = "README.md"
  version = "1.1.0"

[[tool.poetry.packages]]
  include = "ansible_commands"

[tool.poetry.dependencies]
  benedict = "^0.3.2"
  boltdb = "^0.0.2"
  fire = "^0.7.0"
  pandas = "^2.2.3"
  pydantic = "^2.10.0"
  pykeepass = "^4.1.0.post1"
  python = "<4.0,>=3.12"
  simple-toml-settings = "^0.8.0"
  sqlalchemy = "^2.0.36"
  sqlite-utils = "^3.37"
  xkcdpass = "^1.19.9"
  ansible-runner = "^2.4.0"
  paramiko = "^3.5.0"
  sshkey-tools = "^0.11.3"

[tool.poetry.dependencies.utils]
  develop = true
  path = "../../pylibs/utils"

[tool.poetry.dependencies.resources]
  develop = true
  path = "../../pylibs/resources"

[tool.poetry.group.dev.dependencies]
  autopep8 = "2.0.2"
  pytest = "7.3.1"
  pytest-cov = "4.1.0"
  pytest-html = "3.2.0"
  pytest-sugar = "0.9.7"
  ruff = "0.1.5"

[tool.ruff]
  exclude = [
    ".svn",
    ".tox",
    ".eggs",
    ".git",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    "tests",
    "__pypackages__",
    "__pycache__",
    "build",
    "dist",
  ]
  indent-width = 2
  line-length = 128
  target-version = "py312"

[tool.ruff.lint]
  ignore = [
    "PLR0912",
    "D104",
    "D203",
    "D213",
    "E501",
    "PGH003",
    "RET504",
    "D205",
    "ISC001",
    "E111",
    "N999",
    "PT009",
  ]
  select = [
    "A",
    "ASYNC",
    "B",
    "D",
    "DTZ",
    "E",
    "F",
    "FLY",
    "I",
    "ISC",
    "N",
    "NPY",
    "PERF",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "Q",
    "RET",
    "RUF",
    "RSE",
    "SIM",
    "TID",
    "UP",
    "W",
    "YTT",
  ]
  unfixable = ["F401", "F841"]

[tool.ruff.lint.pydocstyle]
  convention = "google"

[tool.ruff.lint.isort]
  section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "tests",
    "local-folder",
    "fixable",
    "unfixable",
  ]

[tool.ruff.lint.isort.sections]
  fixable = ["ALL"]
  tests = ["test"]
  unfixable = []

[tool.ruff.format]
  line-ending = "lf"

[build-system]
  build-backend = "poetry.core.masonry.api"
  requires = ["poetry-core"]

  #[tool.poetry]
  #  authors = ["Jeremy Hettenhouser <jhettenh@gmail.com>"]
  #  description = "System installer for an ansible control node"
  #  license = "MIT"
  #  name = "dasbootstrap"
  #  packages = [
  #    { include = "dasbootstrap/technitium_client", from = "bases" },
  #    { include = "dasbootstrap/chrome_kiosk", from = "bases" },
  #    { include = "dasbootstrap/automation_station", from = "bases" },
  #    { include = "dasbootstrap/paramiko_client", from = "bases" },
  #    { include = "dasbootstrap/semaphore_client", from = "bases" },
  #    { include = "dasbootstrap/inventory", from = "bases" },
  #    { include = "dasbootstrap/dasbootstrap", from = "bases" },
  #    { include = "dasbootstrap/proximate_utils", from = "bases" },
  #    { include = "dasbootstrap/ansible_commands", from = "components" },
  #    { include = "dasbootstrap/ssh", from = "components" },
  #    { include = "dasbootstrap/ansible", from = "components" },
  #    { include = "dasbootstrap/resources", from = "components" },
  #    { include = "dasbootstrap/keegen", from = "components" },
  #    { include = "dasbootstrap/inventory", from = "components" },
  #    { include = "dasbootstrap/docker", from = "components" },
  #    { include = "dasbootstrap/abc", from = "components" },
  #    { include = "dasbootstrap/log", from = "components" },
  #    { include = "ansible_commands", from = "pyprojects" },
  #  ]
  #  readme = "README.md"
  #  repository = "https://github.com/borland502/dasbootstrap"
  #  version = "0.2.7"

  # https://github.com/cod3licious/pubvis/blob/f3559f6b906d24d2104e0808dd5749dce6e02360/pyproject.toml#L36

  #[tool.pyright]
  #  extraPaths = ["bases", "components"]
  #
  #[tool.bandit]
  #  exclude_dirs = [
  #    ".eggs",
  #    ".git",
  #    ".ipynb_checkpoints",
  #    ".mypy_cache",
  #    ".pytest_cache",
  #    ".pytype",
  #    ".ruff_cache",
  #    ".venv",
  #    "tests",
  #    "__pypackages__",
  #    "__pycache__",
  #    "build",
  #    "dist",
  #  ]
  #
  #
  #
  #[tool.pytest.ini_options]
  #  addopts = "--color=yes --doctest-modules --exitfirst --import-mode=importlib --failed-first --verbosity=5 --junitxml=reports/pytest.xml"
  #  filterwarnings = [
  #    'ignore:AnsibleCollectionFinder has already been configured',
  #  ]
  #  markers = ["slow"]
  #  minversion = "6.0"
  #  norecursedirs = [".venv", "lib", "build", "dist"]
  #  testpaths = ["test"]
  #
  #[tool.poetry.plugins]
  #
  #[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
  #  precision = 1
  #  show_missing = true
  #  skip_covered = true
  #
  #[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
  #  branch = true
  #  command_line = "--module pytest"
  #  data_file = "reports/.coverage"
  #  source = ["bases/**/*", "components/**/*"]
  #
  #[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
  #  output = "reports/coverage.xml"
  #
  #[tool.poetry.dependencies]
  #  ansible = "9.1.0"
  #  ansible-lint = { version = "6.22.1", markers = "platform_system != 'Windows'" }
  #  ansible-runner = "^2.3.6"
  #  boltdb = "^0.0.2"
  #  cachier = "^3.0.0"
  #  coloredlogs = ">=15.0.1"
  #  configparser = "^7.0.0"
  #  dnspython = "^2.6.1"
  #  docker = "^7.0.0"
  #  faker = "^26.0.0"
  #  filelock = "^3.15.4"
  #  fire = "^0.6.0"
  #  httpx = "^0.27.0"
  #  icecream = "^2.1.3"
  #  ipaddr = "^2.2.0"
  #  mockito = "^1.5.0"
  #  netaddr = "^1.3.0"
  #  pandas = "^2.2.2"
  #  paramiko = "^3.4.0"
  #  pass-import = "^3.5"
  #  passlib = "^1.7.4"
  #  pexpect = "4.9.0"
  #  playwright = "^1.41.2"
  #  plumbum = "^1.8.2"
  #  poetry = "^1.8.3"
  #  proxmoxer = "2.0.1"
  #  pyautogui = "^0.9.54"
  #  pydantic = "^2.8.2"
  #  pydig = "^0.4.0"
  #  pykeepass = "^4.1.0"
  #  pynput = "^1.7.6"
  #  python = "^3.12"
  #  python-benedict = { extras = ["all"], version = "^0.33.2" }
  #  python-nmap = "^0.7.1"
  #  python3-nmap = "^1.6.0"
  #  pyyaml = "^6.0.1"
  #  redis = "^5.0.7"
  #  requests = "^2.31.0"
  #  scp = "^0.15.0"
  #  self = "^2020.12.3"
  #  semaphore-api = "2.9.45"
  #  six = "^1.16.0"
  #  sqlalchemy = "^2.0.31"
  #  sqlite-utils = "^3.36"
  #  sshconfig = "^2.2"
  #  streamlit = "^1.36.0"
  #  streamlit-extras = "^0.4.3"
  #  strip-ansi = "^0.1.1"
  #  tdnss = "^0.2.1"
  #  toml = "^0.10.2"
  #  typer = "^0.12.5"
  #  types-python-nmap = "^0.7.1.20240106"
  #  undetected-playwright = "^0.3.0"
  #  urllib3 = "<2.1.0"
  #  uvicorn = { extras = ["standard"], version = ">=0.29.0" }
  #  wheel = "0.42.0"
  #  xdg-base-dirs = "^6.0.1"
  #  xkcdpass = "^1.19.9"
  #  zstandard = "^0.22.0"
  #
  #[tool.poetry.group.dev.dependencies]
  #  bandit = "^1.7.8"
  #  docker = "^7.1.0"
  #  faker = "^26.0.0"
  #  mockito = "^1.5.0"
  #  molecule = "6.0.3"
  #  molecule-containers = "^2.0.0"
  #  molecule-plugins = { extras = ["docker"], version = "^23.5.0" }
  #  paramiko = "3.4.0"
  #  pre-commit = ">=3.7.0"
  #  pyright = "^1.1.358"
  #  pyspnego = { extras = ["kerberos"], version = "0.10.2" }
  #  pytest = "^8.2.2"
  #  pytest-ansible = "^24.1.2"
  #  pytest-docker = "^3.1.1"
  #  pytest-mock = ">=3.14.0"
  #  pytest-srcpaths = "^1.2.1"
  #  pytest-xdist = ">=3.5.0"
  #  pyupgrade = "^3.15.2"
  #  sansldap = "0.1.0"
  #
  #
  #[build-system]
  #  build-backend = "poetry.core.masonry.api"
  #  requires = ["poetry-core"]
