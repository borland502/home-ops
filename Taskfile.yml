# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

dotenv:
  - ${HOME}/.env
  - ${HOME}/.zshrc
  - ${HOME}/.zshenv

includes:
  deploy:
    taskfile: "./scripts/taskfiles/deploy.yaml"
  ansible:
    taskfile: "./scripts/taskfiles/ansible.yaml"
  chez:
    taskfile: "./scripts/taskfiles/chezmoi.yaml"
  #  kp:
  #    taskfile: "./scripts/taskfiles/keepassxc.yaml"
  validate:
    internal: true
    taskfile: "./scripts/taskfiles/validate.yaml"
  install:
    internal: true
    taskfile: "./scripts/taskfiles/install/install.yaml"
  #  git:
  #    internal: true
  #    taskfile: "./scripts/taskfiles/git.yaml"
  unison:
    taskfile: "./scripts/taskfiles/unison.yaml"

tasks:
  build:boot:jar:
    desc: Build the boot jar
    summary: |
      This task builds the boot jar locally
    cmds:
      - >-
        ./gradlew clean bootJar
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops/scripts/spring-cli"

  mcv:pack:
    desc: Pack all the projects
    silent: true
    summary: |
      This task packs all the projects locally into a script with a jar attachment to install everything on the target system
    deps:
      - task: install:node
      - task: install:python
      - task: install:brew
      - task: build:boot:jar
    cmds:
      - cmd: test -d /tmp/mcv && rm -rf /tmp/mcv
      - cmd: mkdir -p /tmp/mcv/dist
      # Clean build artifacts and temporary directories in the automation data directory
      - cmd: |
          find {{.XDG_DATA_HOME}}/automation \
          -type d \( -name "node_modules" -o -name "dist" -o -name "target" -o -name "__pycache__" -o -name "*.egg-info" -o -name ".venv" \) \
          -exec rm -rf {} +
      # Create archive
      - cmd: >-
          tar -czf /tmp/mcv/dist/payload.tar.gz -C {{.XDG_CONFIG_HOME}} {{.XDG_DATA_HOME}}/trapper_keeper {{.XDG_DATA_HOME}}/unison {{.ANSIBLE_HOME}}
      # Create executable
      - cmd: >-
          cat {{.XDG_DATA_HOME}}/automation/home-ops/scripts/shell/bin/dasbootstrap.sh
          {{.XDG_DATA_HOME}}/automation/home-ops/scripts/shell/bin/user_install.sh
          {{.XDG_DATA_HOME}}/automation/home-ops/scripts/spring-cli/build/libs/home-ops.jar > /tmp/mcv/dist/mcv.run &&
          chmod +x /tmp/mcv/dist/mcv.run
      # Create tarball
      - cmd: >-
          tar -czf /tmp/mcv.tar.gz -C /tmp/mcv/dist/mcv.run /tmp/mcv/dist/payload.tar.gz

  mcv:unpack:
    desc: Unpack all the projects
    silent: true
    summary: |
      This task unpacks all the projects locally from a script with a jar attachment
    cmds:
      # Unpack the tarball
      - cmd: >-
          tar -xzf /tmp/mcv.tar.gz -C /tmp/mcv/dist
      # Run the script
      - cmd: >-
          /tmp/mcv/dist/mcv.run

  angularapp:create:
    desc: Create a new Angular application
    summary: |
      This task creates a new Angular application, skipping test and framework defaults for flexibility
    cmds:
      - >-
        npx nx generate @nx/angular:application --directory apps/{{.PROJ_NAME}} --bundler esbuild
        --standalone false --e2eTestRunner playwright --unitTestRunner jest --style less
        --name {{.PROJ_NAME}} --ssr false --verbose
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Project Name')"
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  nodeapp:create:
    desc: Create a new NodeJS application
    summary: |
      This task creates a new NodeJS application, skipping test and framework defaults for flexibility
    cmds:
      - >-
        npx nx generate @nx/node:application --directory apps/{{.PROJ_NAME}} --bundler esbuild --framework none
        --name {{.PROJ_NAME}} --docker true --e2eTestRunner none --js false --unitTestRunner none
        --projectNameAndRootFormat as-provided --verbose
    #      - test -f ./apps/{{.PROJ_NAME}}/eslint.config.js && rm ./apps/{{.PROJ_NAME}}/eslint.config.js
    #      - mv ./apps/{{.PROJ_NAME}}/main.ts ./apps/{{.PROJ_NAME}}/main.mts
    #      - ln -sf ./config/apps/tsconfig.json ./apps/{{.PROJ_NAME}}/tsconfig.json
    #      - ln -sf ./config/apps/tsconfig.app.json ./apps/{{.PROJ_NAME}}/tsconfig.app.json
    #      - ln -sf ./config/apps/tsconfig.spec.json ./apps/{{.PROJ_NAME}}/tsconfig.spec.json
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Project Name')"
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  nodelib:create:
    desc: Create a new NodeJS library
    summary: |
      This task creates a new NodeJS library, skipping test and framework defaults for flexibility
    cmds:
      - >-
        npx nx generate @nx/node:library --directory libs/{{.PROJ_NAME}} --bundler esbuild --framework none
        --name {{.PROJ_NAME}} --docker true --e2eTestRunner none --js false --unitTestRunner none
        --projectNameAndRootFormat as-provided --verbose
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Library Name')"
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  pyapp:create:
    desc: Create a new Python application
    summary: |
      This task creates a new Python application
    cmds:
      - >-
        npx nx generate @nxlv/python:poetry-project {{.PROJ_NAME}} --projectType application --packageName {{.PROJ_NAME}}
        --directory pyapps/{{.PROJ_NAME}} --moduleName {{.MODULE_NAME}}  --pyprojectPythonDependency '>=3.11,<4.0'
        --linter ruff --projectNameAndRootFormat as-provided
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Project Name')"
      MODULE_NAME:
        sh: "echo $(gum input --placeholder 'Module Name: Usually the same as the project name with an underscore')"

  pylib:create:
    desc: Create a new Python library
    summary: |
      This task creates a new Python library
    cmds:
      - >-
        npx nx generate @nxlv/python:poetry-project {{.PROJ_NAME}} --projectType library --packageName {{.PROJ_NAME}}
        --directory pylibs/{{.PROJ_NAME}} --moduleName {{.MODULE_NAME}}  --pyprojectPythonDependency '>=3.11,<4.0'
        --linter ruff --projectNameAndRootFormat as-provided
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Library Name')"
      MODULE_NAME:
        sh: "echo $(gum input --placeholder 'Module Name: Usually the same as the library name with an underscore')"
