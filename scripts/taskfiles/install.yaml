# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  NVM_VER: "0.40.1"

includes:
  validate:
    taskfile: "./validate.yaml"

tasks:
  brew:
    desc: Ensure that brew is installed
    run: once
    deps:
      - task: validate:internal:xdg
      - task: validate:internal:scripts
    status:
      - test -n ${HOMEBREW_PREFIX+x}
      - test -d ${HOMEBREW_PREFIX}
    cmds:
      - |
        # Confirm that brew is installed, and if not, install it
        if ! [[ $(command -v brew) ]]; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi

  chezmoi:
    desc: Ensure that chezmoi is installed
    run: once
    deps:
      - task: brew
    status:
      - test $(command -v chezmoi)
      - test -d ${XDG_DATA_HOME}/automation/home-ops/scripts/dotfiles
      - test -d ${XDG_DATA_HOME}/chezmoi
      - test -d ${XDG_CONFIG_HOME}/chezmoi
    cmds:
      - |
        # Confirm that chezmoi is installed, and if not, install it
        if ! [[ $(command -v chezmoi) ]]; then
          brew install chezmoi
        fi

  nvm:
    desc: Ensure the NVM is installed
    run: once
    deps:
      - task: validate:internal:xdg
      - task: validate:internal:scripts
    #        internal: true
    #        silent: true
    status:
      - test -z ${NVM_DIR+x}
      - test -d ${NVM_DIR}
    cmds:
      - |
        # Confirm that nvm is installed, and if not, install it
        if [[ -z ${NVM_DIR+x}  ]]; then
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{.NVM_VER}}/install.sh | bash
          export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
        fi
        source "${NVM_DIR}/nvm.sh"

  npm:
    desc: Ensure the npm is installed
    run: once
    deps:
      - task: nvm
    status:
      - test -n ${NPM_CONFIG_DIR+x}
      - test $(command -v npm)
      - test $(command -v node)
      - test $(command -v npx)
      - test $(command -v tsx)
    cmds:
      - |
        # Confirm that npm is installed, and if not, install it
        if ! [[ $(command -v npm) ]]; then
          nvm install --lts
          npm i -g tsx
        fi

  pyenv:
    desc: Ensure the pyenv is installed
    run: once
    deps:
      - task: validate:internal:xdg
      - task: validate:internal:scripts
    status:
      - test -z ${PYENV_ROOT+x}
      - test -d ${PYENV_ROOT}
    cmds:
      - |
        # Confirm that pyenv is installed, and if not, install it
        if ! [[ $(command -v pyenv) ]]; then
          curl https://pyenv.run | bash
          export PYENV_ROOT="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.pyenv" || printf %s "${XDG_CONFIG_HOME}/pyenv")"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
        fi
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"

  python:
    desc: Ensure the python is installed
    run: once
    deps:
      - task: pyenv
    status:
      - test -n ${PYENV_ROOT+x}
      - test -d ${PYENV_ROOT}
      - test $(command -v python)
      - test $(command -v pip)
      - test $(pyenv install --list | grep -E '^\s*3\.[0-9]+\.[0-9]+$' | tail -1) == $(python --version | grep -Eo '3\.[0-9]+\.[0-9]+$')
    cmds:
      - |
        # Confirm that python is installed, and if not, install it
        if ! [[ $(command -v python) ]]; then
          PYVER=$(pyenv install --list | grep -E '^\s*3\.[0-9]+\.[0-9]+$' | tail -1)
          pyenv install $PYVER
          pyenv global $PYVER
        fi

  pipx:
    desc: Ensure the pipx is installed
    run: once
    deps:
      - task: python
    status:
      - test $(command -v pipx)
    cmds:
      - |
        # Confirm that pipx is installed, and if not, install it
        if ! [[ $(command -v pipx) ]]; then
          python -m pip install --user pipx
          python -m pipx ensurepath
        fi
