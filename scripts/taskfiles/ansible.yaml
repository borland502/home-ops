# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

env:
  ANSIBLE_CONFIG: "{{.ANSIBLE_HOME}}/ansible.cfg"
  ANSIBLE_KEEPASS_PSW: "{{.ANSIBLE_KEEPASS_PSW}}"
  ANSIBLE_KEEPASS_KEY: "{{.ANSIBLE_KEEPASS_FILE}}"
  ANSIBLE_TTL: 600
  ANSIBLE_KEEPASS_SOCKET: "{{.ANSIBLE_HOME}}/keepassxc.sock"

vars:
  ANSIBLE_HOME: "${HOME}/.ansible"
  ANSIBLE_INV_HOME: "{{.ANSIBLE_HOME}}/inventory"

tasks:

  ping:
    desc: Ping all the hosts
    cmds:
      - ansible all -i {{.ANSIBLE_INV_HOME}} -m 'ping'

  fingerprint:
      desc: Get the SSH fingerprint for each host
      cmds:
        - ansible all -i {{.ANSIBLE_INV_HOME}} --one-line -m 'command' -a 'ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub'

  update-collections:
      internal: true
      deps:
        - task: update-external-srcs
      desc: Update the available ansible collections using ~/.ansible/collections/requirements.yml
      cmds:
          - |
              {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-collections 2>/dev/null
  update-roles:
      deps:
        - task: update-external-srcs
      internal: true
      desc: Update the available ansible roles using ~/.ansible/roles/requirements.yml
      cmds:
         - |
             {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-roles 2>/dev/null

#  update:containers:
#      deps:
#          - task: poetry:shell
#      desc: Update lxc and kvm containers
#      cmds:
#          - "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-containers --user ansible 2>/dev/null"
#
#  create:kvm:
#      desc: Create a KVM by hostname
#      cmds:
#          - |
#            "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} create-kvm --app-name {{.KVM_HOST}} 2>/dev/null"
#      vars:
#          KVM_HOST:
#              sh: |
#                  echo $(gum input --prompt="What is the hostname for the KVM template? " --placeholder "kvm")
#  create:lxc:
#      desc: Create an LXC by hostname
#      deps:
#        - task: venv:install
#      cmds:
#          - |
#              "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} create-lxc --app-name "{{ .LXC_HOST }}" 2>/dev/null"
#      vars:
#          LXC_HOST:
#              sh: |
#                  echo "$(find ~/.ansible/inventory/host_vars -name "*.yaml" -exec sh -c 'basename {} .yaml' \; | gum choose)"
#
#  destroy:lxc:
#      desc: Destroy an LXC by hostname
#      cmds:
#          - |
#              {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} destroy --app-name -- {{.CLI_ARGS}} 2>/dev/null
#      vars:
#          LXC_HOST:
#              sh: |
#                  echo $(gum input --prompt="What is the hostname for the LXC template? " --placeholder "lxc")
#  update-collections:
#      internal: true
#      deps:
#        - task: update-external-srcs
#      desc: Update the available ansible collections using ~/.ansible/collections/requirements.yml
#      cmds:
#          - |
#              {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-collections 2>/dev/null
#  update-roles:
#      deps:
#        - task: update-external-srcs
#      internal: true
#      desc: Update the available ansible roles using ~/.ansible/roles/requirements.yml
#      cmds:
#         - |
#             {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-roles 2>/dev/null
#
#  update-external-srcs:
#    silent: true
#    internal: true
#    run: "once"
#    desc: Download and validate external sources ansible depends upon
#    cmds:
#      - "{{.ANSIBLE_PLAYBOOK}} {{.ANSIBLE_HOME}}/playbooks/maintainence/find_sqlite.yaml {{.ANSIBLE_ALL_INV_SUFFIX}}/ 2>/dev/null"
#      - "cp ${DASBOOTSTRAP_HOME}/ansible/collections/requirements.yml {{.ANSIBLE_HOME}}/collections/requirements.yml"
#      - "cp ${DASBOOTSTRAP_HOME}/ansible/roles/requirements.yml {{.ANSIBLE_HOME}}/roles/requirements.yml"
#    generates:
#      - "{{.ANSIBLE_HOME}}/secrets/db.sqlite"
#
#  galaxy:collection:install:
#    desc: "Install collections"
#    cmds:
#      - "{{.ANSIBLE_COLLECTIONS_INSTALL_PREFIX}}"
#    dir: "{{.ANSIBLE_HOME}}"
#
#  galaxy:role:install:
#    desc: "Install roles"
#    cmds:
#      - "{{.ANSIBLE_ROLES_INSTALL_PREFIX}}"
#    dir: "{{.ANSIBLE_HOME}}"
#
#  update:
#      desc: Update dasbootstrap and ansible dependencies
#      sources:
#          - "{{.HOME}}/.ansible/collections/requirements.yml"
#          - "{{.HOME}}/.ansible/roles/requirements.yml"
#      generates:
#          - "{{.HOME}}/.ansible/collections/**/*.yml"
#          - "{{.HOME}}/.ansible/collections/**/*.yaml"
#          - "{{.HOME}}/.ansible/roles/**/*.yaml"
#          - "{{.HOME}}/.anbile/roles/**/*.yml"
#      deps:
#          - task: update-roles
#          - task: inv:setup
#          - task: update-collections
#          - task: update-external-srcs
#      cmds:
#          - task: inv:all:yaml:export

