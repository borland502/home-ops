# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

includes:
  validate:
    taskfile: "./validate.yaml"
  install:
    taskfile: "./install/install.yaml"

env:
  NODE_PATH: "${XDG_DATA_HOME}/automation/home-ops/node_modules"


vars:
  HOMEOPS_DIR: "${XDG_DATA_HOME}/automation/home-ops"
  TARGET_DIR: "${XDG_BIN_HOME}"

tasks:

  #  help:
  #    desc: Scripts available in this project
  #    cmd:

  internal:init:
    internal: true
    silent: true
    desc: Validate script prerequisites
    preconditions:
      - test $(command -v npx) || echo "npx is not installed. Please install it."
      - test $(command -v tsx) || echo "tsx is not installed. Please install it."
      - test $(command -v zsh) || echo "zsh is not installed. Please install it."
      - test $(command -v zx) || echo "zx is not installed. Please install it."
      - test $(command -v python) || echo "python is not installed. Please install it."
      - test -d "${XDG_DATA_HOME}/automation/home-ops" || echo "The home-ops repository is not cloned. Please clone it."
    cmds:
      - |
        # Confirm that XDG_BIN_HOME is set and not empty
        if [ -z "${XDG_BIN_HOME+x}" ]; then
          echo "XDG_BIN_HOME is not set. Please set it to the directory where the scripts will be deployed."
          exit 2
        fi
      - |
        # Create the target directory if it doesn't exist
        mkdir -p "${XDG_BIN_HOME}"
      - |
        # Confirm that NODE_CONFIG_DIR is set and not empty
        if [ -z "${NODE_CONFIG_DIR+x}" ]; then
          echo "NODE_CONFIG_DIR is not set. Please set it to the directory where the configuration files are stored."
          exit 2
        fi

  internal:copy:config:
    internal: true
    silent: true
    desc: Copy the configuration files to the NODE_CONFIG_DIR
    cmds:
      - |
        # Define the source directories and the target directory
        source_dir="{{.HOMEOPS_DIR}}/config"
        target_dir="${XDG_CONFIG_HOME}/home-ops"

        # Create the target directory if it doesn't exist
        mkdir -p "$target_dir"

        # Copy the configuration files to the target directory
        ln -sf "$source_dir"/*.toml "$target_dir"
    sources:
      - "{{.HOMEOPS_DIR}}/config/*"
    generates:
      - "{{.XDG_CONFIG_HOME}}/home-ops"

  internal:deploy:ansible:
    silent: true
    internal: true
    preconditions:
      - sh: test -d "${HOME}/.ansible"
        msg: "The ansible directory does not exist. Please create it."
      - sh: test $(task install:pyenv)
        msg: "pyenv is not installed and could not be installed. Please install it."
    desc: Deploy the ansible playbooks, roles, etc to the ~/.ansible directory
    cmds:
      - |
        # Define the source directories and the target directory
        source_dirs=("{{.HOMEOPS_DIR}}/scripts/ansible/playbooks" "{{.HOMEOPS_DIR}}/scripts/ansible/roles")
        source_dirs+=("{{.HOMEOPS_DIR}}/scripts/ansible/collections")
        target_dir="${XDG_CONFIG_HOME}/ansible"

        # Create the target directory if it doesn't exist
        mkdir -p "$target_dir"

        # Copy the ansible playbooks and roles to the target directory
        for dir in "${source_dirs[@]}"; do
          files=$(find "$dir" -type f)
          for file in $files; do
            base_name=$(basename "$file")
            ln -sf "${file}" ${XDG_CONFIG_HOME}/ansible/${base_name}
          done
        done

  #  internal:deploy:taskfiles:
  #    silent: true
  #    internal: true
  #    desc: Deploy the taskfiles to the ~/.config/taskfiles directory
  #    cmds:
  #      - |
  #        # Define the source directories and the target directory
  #        source_dir="{{.HOMEOPS_DIR}}/scripts/taskfiles"
  #        target_dir="${XDG_DATA_HOME}/automation/home-ops/scripts/taskfiles"
  #
  #        # Create the target directory if it doesn't exist
  #        mkdir -p "$target_dir"
  #
  #        # Copy the taskfiles to the target directory
  #        ln -sf "$source_dir"/*.yaml "$target_dir"
  #    sources:
  #      - "{{.HOMEOPS_DIR}}/scripts/taskfiles/*"
  #    generates:
  #      - "{{.XDG_CONFIG_HOME}}/taskfiles"

  internal:deploy:shell:
    desc: Deploy the shell scripts to the ~/.local/{bin,lib} directory
    silent: true
    internal: true
    cmds:
      - |
        # Define the source directories and the target directory
        source_dirs=("{{.HOMEOPS_DIR}}/scripts/shell/bin")
        target_dir="{{.TARGET_DIR}}"

        # Create the target directory if it doesn't exist
        mkdir -p "$target_dir"

        # copy the shell scripts to the target directory
        for dir in "${source_dirs[@]}"; do
          files=$(find "$dir" -type f)
          for file in $files; do
            base_name=$(basename "$file" | sed 's/\.[^.]*$//')
            ln -sf "${file}" ${XDG_BIN_HOME}/${base_name}

            chmod +x ${XDG_BIN_HOME}/${base_name}
          done
        done
      - |
        # Define the source directories and the target directory
        source_dirs=("{{.HOMEOPS_DIR}}/scripts/shell/lib")
        target_dir="{{.TARGET_DIR}}"

        # Create the target directory if it doesn't exist
        mkdir -p "$target_dir"

        # copy the shell scripts to the target directory
        for dir in "${source_dirs[@]}"; do
          files=$(find "$dir" -type f)
          for file in $files; do
            base_name=$(basename "$file")
            ln -sf "${file}" ${XDG_LIB_HOME}/${base_name}
          done
        done

  internal:deploy:zx:
    desc: Deploy the ZX scripts to the ~/.local/bin directory as SEA scripts
    summary: |
      # SEA scripts

      > Deploy the ZX scripts to the ~/.local/bin directory

      ## Links
      - [SEA](https://nodejs.org/api/single-executable-applications.html)
      - [ZX](https://google.github.io/zx/getting-started)
    cmds:
      - cmd: |
          # Compile all TypeScript files in the HOMEOPS_DIR/scripts/zx directory to CJS files
          for file in $(find "scripts/zx" -name "*.mts"); do
            npx esbuild --bundle --platform=node --tsconfig=tsconfig.base.json --format=cjs $file
          done
      - cmd: >-
          npx tsx --experimental-sea-config "scripts/zx/sea-config.json"
          > "dist/sea-prep.blob"
      - cmd: cp $(command -v node) "dist/home-ops"
      - cmd: |
          if [[ $(uname) == "Darwin" ]]; then
            codesign --remove-signature "dist/home-ops"
            npx postject "dist/home-ops" NODE_SEA_BLOB \
            "dist/sea-prep.blob" --macho-segment-name NODE_SEA \
            --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2
          else
            npx postject "scripts/dist/home-ops" NODE_SEA_BLOB "scripts/dist/sea-prep.blob" --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8
          fi

  #  internal:deploy:zx:
  #    silent: true
  #    internal: true
  #    desc: Deploy the ZX scripts to the ~/.local/bin directory
  #    cmds:
  #      - |-
  #        # Define the source directories and the target directory
  #        source_dirs=("{{.HOMEOPS_DIR}}/scripts/zx")
  #        target_dir="{{.TARGET_DIR}}"
  #
  #        # Create the target directory if it doesn't exist
  #        mkdir -p "$target_dir"
  #
  #        # create a shim to the script directory
  #        for dir in "${source_dirs[@]}"; do
  #          files=$(find "$dir" -type f)
  #          for file in $files; do
  #            base_name=$(basename "$file" | sed 's/\.[^.]*$//')
  #
  #            # missing something about heredocs in yaml
  #            echo "#!/usr/bin/env zsh" > ${XDG_BIN_HOME}/${base_name}
  #            echo "nvm use --lts" >> ${XDG_BIN_HOME}/${base_name}
  #            echo "NODE_ENV=prod npx tsx --tsconfig "${XDG_DATA_HOME}/automation/home-ops/tsconfig.base.json" $file" >> ${XDG_BIN_HOME}/${base_name}
  #
  #            chmod +x ${XDG_BIN_HOME}/${base_name}
  #          done
  #        done

  sync:
    silent: true
    deps:
      - task: validate:internal:xdg
      - task: internal:copy:config
      - task: internal:init
    desc: Deploy the scripts to the ~/.local/bin directory
    cmds:
      - task: internal:deploy:zx
      #      - task: internal:deploy:taskfiles
      - task: internal:deploy:shell
