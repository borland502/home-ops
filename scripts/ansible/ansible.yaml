# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  ANSIBLE_HOME: "/Users/jhettenh/.ansible"
  BREW: brew
  CHEZMOI_HOME: "/Users/jhettenh/.local/share/chezmoi"
  DASBOOTSTRAP_HOME: "/Users/jhettenh/.local/share/automation/dasbootstrap"
  DBS_MODULE_DASBOOTSTRAP: "dasbootstrap.dasbootstrap.core"
  DBS_MODULE_KIOSK: "dasbootstrap.chromekiosk"
  DBS_RUN_PREFIX: "/Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/poetry run"
  DBS_VENV_PACKAGES: "/Users/jhettenh/.local/share/automation/dasbootstrap/.venv/lib/python3.12/site-packages/dasbootstrap"
  DBS_VENV_PIP: "/Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/poetry run /Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/pip"
  RUN_PREFIX: "/Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/poetry"
  DBS_VENV_PYTHON: "/Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/poetry run /Users/jhettenh/.local/share/automation/dasbootstrap/.venv/bin/python -m "
  DBS_POLY_BASES: "/Users/jhettenh/.local/share/automation/dasbootstrap/bases/**/*"
  DBS_POLY_COMPONENTS: "/Users/jhettenh/.local/share/automation/dasbootstrap/components/**/*"
  GH: gh
  HOME: "/Users/jhettenh"
  JSON_SUFFIX: "--json"
  PIP: pip3
  POETRY: poetry
  PYTEST: pytest
  PYTHON: python3
  PYTHON_VER: 3.12
  RUN_UNITTEST_PREFIX: "$poetry run python -m unittest"
  STREAMLIT: streamlit
  ST_RUN_PREFIX: "$poetry run streamlit run"
  TOML_SUFFIX: "--toml"
  VENV_PREFIX: "pyenv virtualenv"
  YAML_SUFFIX: "--yaml"

  PYTEST_PREFIX: pytest
  POLY_BASES: "${DASBOOTSTRAP_HOME}/bases/**/*"
  POLY_COMPONENTS: "${DASBOOTSTRAP_HOME}/components/**/*"
  PYTHON_SRC:
    sh: fd --glob "*.py" | tr '\n' ' '
  SCRIPTS:
    sh: fd --no-ignore --glob '*.sh' | tr '\n' ' '

includes:
  inv:
    taskfile: "{{.XDG_CONFIG_HOME}}/taskfiles/inventory.yaml"
    dir: "${DASBOOTSTRAP_HOME}"

tasks:

  update:containers:
      deps:
          - task: poetry:shell
      desc: Update lxc and kvm containers
      cmds:
          - "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-containers --user ansible 2>/dev/null"

  create:kvm:
      desc: Create a KVM by hostname
      cmds:
          - |
            "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} create-kvm --app-name {{.KVM_HOST}} 2>/dev/null"
      vars:
          KVM_HOST:
              sh: |
                  echo $(gum input --prompt="What is the hostname for the KVM template? " --placeholder "kvm")
  create:lxc:
      desc: Create an LXC by hostname
      deps:
        - task: venv:install
      cmds:
          - |
              "{{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} create-lxc --app-name "{{ .LXC_HOST }}" 2>/dev/null"
      vars:
          LXC_HOST:
              sh: |
                  echo "$(find ~/.ansible/inventory/host_vars -name "*.yaml" -exec sh -c 'basename {} .yaml' \; | gum choose)"

  destroy:lxc:
      desc: Destroy an LXC by hostname
      cmds:
          - |
              {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} destroy --app-name -- {{.CLI_ARGS}} 2>/dev/null
      vars:
          LXC_HOST:
              sh: |
                  echo $(gum input --prompt="What is the hostname for the LXC template? " --placeholder "lxc")
  update-collections:
      internal: true
      deps:
        - task: update-external-srcs
      desc: Update the available ansible collections using ~/.ansible/collections/requirements.yml
      cmds:
          - |
              {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-collections 2>/dev/null
  update-roles:
      deps:
        - task: update-external-srcs
      internal: true
      desc: Update the available ansible roles using ~/.ansible/roles/requirements.yml
      cmds:
         - |
             {{.DBS_VENV_PYTHON}} {{.DBS_MODULE_DASBOOTSTRAP}} update-roles 2>/dev/null

  update-external-srcs:
    silent: true
    internal: true
    run: "once"
    desc: Download and validate external sources ansible depends upon
    cmds:
      - "{{.ANSIBLE_PLAYBOOK}} {{.ANSIBLE_HOME}}/playbooks/maintainence/find_sqlite.yaml {{.ANSIBLE_ALL_INV_SUFFIX}}/ 2>/dev/null"
      - "cp ${DASBOOTSTRAP_HOME}/ansible/collections/requirements.yml {{.ANSIBLE_HOME}}/collections/requirements.yml"
      - "cp ${DASBOOTSTRAP_HOME}/ansible/roles/requirements.yml {{.ANSIBLE_HOME}}/roles/requirements.yml"
    generates:
      - "{{.ANSIBLE_HOME}}/secrets/db.sqlite"

  galaxy:collection:install:
    desc: "Install collections"
    cmds:
      - "{{.ANSIBLE_COLLECTIONS_INSTALL_PREFIX}}"
    dir: "{{.ANSIBLE_HOME}}"

  galaxy:role:install:
    desc: "Install roles"
    cmds:
      - "{{.ANSIBLE_ROLES_INSTALL_PREFIX}}"
    dir: "{{.ANSIBLE_HOME}}"

  update:
      desc: Update dasbootstrap and ansible dependencies
      sources:
          - "{{.HOME}}/.ansible/collections/requirements.yml"
          - "{{.HOME}}/.ansible/roles/requirements.yml"
      generates:
          - "{{.HOME}}/.ansible/collections/**/*.yml"
          - "{{.HOME}}/.ansible/collections/**/*.yaml"
          - "{{.HOME}}/.ansible/roles/**/*.yaml"
          - "{{.HOME}}/.anbile/roles/**/*.yml"
      deps:
          - task: update-roles
          - task: inv:setup
          - task: update-collections
          - task: update-external-srcs
      cmds:
          - task: inv:all:yaml:export

