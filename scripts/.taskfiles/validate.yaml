# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  NODE_LTS_VERSION:
    sh: |
      # Confirm that nvm is installed, and if not, install it
      if [[ $(command -v nvm) ]]; then
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
      fi
      source "${NVM_DIR}/nvm.sh"
      nvm ls-remote --lts | tail -n 1 | grep -oP '\d+\.\d+\.\d+' | echo

tasks:

  debug:
    desc: Print the environment variables
    cmds:
      - echo "XDG_DATA_HOME: ${XDG_DATA_HOME}"
      - echo "XDG_CONFIG_HOME: ${XDG_CONFIG_HOME}"
      - echo "XDG_BIN_HOME: ${XDG_BIN_HOME}"
      - echo "XDG_CACHE_HOME: ${XDG_CACHE_HOME}"
      - echo "XDG_RUNTIME_DIR: ${XDG_RUNTIME_DIR}"
      - echo "XDG_STATE_HOME: ${XDG_STATE_HOME}"
      - echo "XDG_CONFIG_DIRS: ${XDG_CONFIG_DIRS}"
      - echo "XDG_DATA_DIRS: ${XDG_DATA_DIRS}"
      - echo "XDG_LIB_HOME: ${XDG_LIB_HOME}"
      - echo "NODE_CONFIG_DIR: ${NODE_CONFIG_DIR}"
      - echo "NODE_LTS_VERSION: ${NODE_LTS_VERSION}"

  xdg:
    desc: Ensure the XDG directories are set
    cmds:
      - |
        # Confirm that XDG_DATA_HOME is set and not empty
        if [ -z "${XDG_DATA_HOME+x}" ]; then
          echo "XDG_DATA_HOME is not set. Please set it to the directory where the data files will be stored."
          exit 2
        fi
      - |
        # Confirm that XDG_CONFIG_HOME is set and not empty
        if [ -z "${XDG_CONFIG_HOME+x}" ]; then
          echo "XDG_CONFIG_HOME is not set. Please set it to the directory where the configuration files will be stored."
          exit 2
        fi
      - |
        # Confirm that XDG_BIN_HOME is set and not empty
        if [ -z "${XDG_BIN_HOME+x}" ]; then
          echo "XDG_BIN_HOME is not set. Please set it to the directory where the scripts will be deployed."
          exit 2
        fi
      - |
        # Confirm that XDG_CACHE_HOME is set and not empty
        if [ -z "${XDG_CACHE_HOME+x}" ]; then
          echo "XDG_CACHE_HOME is not set. Please set it to the directory where the cache files will be stored."
          exit 2
        fi
      - |
        # Confirm that XDG_RUNTIME_DIR is set and not empty
        if [ -z "${XDG_RUNTIME_DIR+x}" ]; then
          echo "XDG_RUNTIME_DIR is not set. Please set it to the directory where the runtime files will be stored."
          exit 2
        fi
      - |
        # Confirm that XDG_STATE_HOME is set and not empty
        if [ -z "${XDG_STATE_HOME+x}" ]; then
          echo "XDG_STATE_HOME is not set. Please set it to the directory where the state files will be stored."
          exit 2
        fi
      - |
        # Confirm that XDG_CONFIG_DIRS is set and not empty
        if [ -z "${XDG_CONFIG_DIRS+x}" ]; then
          echo "XDG_CONFIG_DIRS is not set. Please set it to the directories where the configuration files are stored."
          exit 2
        fi
      - |
        # Confirm that XDG_DATA_DIRS is set and not empty
        if [ -z "${XDG_DATA_DIRS+x}" ]; then
          echo "XDG_DATA_DIRS is not set. Please set it to the directories where the data files are stored."
          exit 2
        fi

  scripts:
    desc: Ensure the scripts bin & lib directories are set
    cmds:
      - |
        # Confirm that the scripts directory is set and not empty
        if [ -z "${XDG_BIN_HOME+x}" ]; then
          echo "SCRIPTS_DIR is not set. Please set it to the directory where the scripts are stored."
          exit 2
        fi
      - |
        if [ -z "${XDG_LIB_HOME+x}" ]; then
          echo "SCRIPTS_LIB_DIR is not set. Please set it to the directory where the scripts libraries are stored."
          exit 2
        fi

  baseline:
    desc: Install the baseline dependencies
