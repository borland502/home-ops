[tool.coverage.run]
    branch = true
    source = ["ansible_commands"]

[tool.coverage.report]
    exclude_lines = ["if TYPE_CHECKING:"]
    show_missing = true

[tool.nx]
    autoactivate = true
    autoinstall = true

[tool.pytest.ini_options]
    addopts = "--cov --cov-report html:'../../coverage/pyapps/ansible-commands/html' --cov-report xml:'../../coverage/pyapps/ansible-commands/coverage.xml' --html='../../reports/pyapps/ansible-commands/unittests/html/index.html' --junitxml='../../reports/pyapps/ansible-commands/unittests/junit.xml'"

[tool.poetry]
    authors = ["Jeremy Hettenhouser"]
    description = "Automatically generated by Nx."
    group = {}
    license = "MIT"
    name = "ansible-commands"
    readme = "README.md"
    version = "1.1.1"

[tool.poetry.scripts]
    ansible-commands = "ansible_commands.cli:app"

[[tool.poetry.packages]]
    include = "ansible_commands"

[tool.poetry.dependencies]
    ansible = "11.1.0"
    ansible-lint = { version = "6.22.1", markers = "platform_system != 'Windows'" }
    ansible-runner = "^2.3.6"
    benedict = "^0.3.2"
    boltdb = "^0.0.2"
    fire = "^0.7.0"
    pandas = "^2.2.3"
    paramiko = "^3.5.0"
    proxmoxer = "^2.1.0"
    pydantic = "^2.10.0"
    pykeepass = "^4.1.0.post1"
    python = ">=3.11,<4.0"
    simple-toml-settings = "^0.8.0"
    sqlalchemy = "^2.0.36"
    sqlite-utils = "^3.37"
    sshkey-tools = "^0.11.3"
    xkcdpass = "^1.19.9"

[tool.ruff]
    exclude = [
        ".svn",
        ".tox",
        ".eggs",
        ".git",
        ".ipynb_checkpoints",
        ".mypy_cache",
        ".pytest_cache",
        ".pytype",
        ".ruff_cache",
        ".venv",
        "tests",
        "__pypackages__",
        "__pycache__",
        "build",
        "dist",
    ]
    indent-width = 4
    line-length = 128
    target-version = "py312"

[tool.ruff.lint]
    ignore = [
        "PLR0912",
        "D104",
        "D203",
        "D213",
        "E501",
        "PGH003",
        "RET504",
        "D205",
        "ISC001",
        "E111",
        "N999",
        "PT009",
    ]
    select = [
        "A",
        "ASYNC",
        "B",
        "D",
        "DTZ",
        "E",
        "F",
        "FLY",
        "I",
        "ISC",
        "N",
        "NPY",
        "PERF",
        "PGH",
        "PIE",
        "PL",
        "PT",
        "Q",
        "RET",
        "RUF",
        "RSE",
        "SIM",
        "TID",
        "UP",
        "W",
        "YTT",
    ]
    unfixable = ["F401", "F841"]

[tool.ruff.lint.pydocstyle]
    convention = "google"

[tool.ruff.lint.isort]
    section-order = [
        "future",
        "standard-library",
        "third-party",
        "first-party",
        "tests",
        "local-folder",
        "fixable",
        "unfixable",
    ]

[tool.ruff.lint.isort.sections]
    fixable = ["ALL"]
    tests = ["test"]
    unfixable = []

[tool.ruff.format]
    line-ending = "lf"

[build-system]
    build-backend = "poetry.core.masonry.api"
    requires = ["poetry-core"]
