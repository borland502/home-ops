# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

includes:
    scripts:
        taskfile: "{{.XDG_DATA_HOME}}/automation/home-ops/scripts/scripts.yaml"
        dir: "{{.XDG_DATA_HOME}}/automation/home-ops/scripts"
    chez:
      taskfile: "{{.XDG_CONFIG_HOME}}/taskfiles/chezmoi.yaml"
      dir: "{{.CHEZMOI_HOME}}"
    keepassxc:
        taskfile: "{{.XDG_DATA_HOME}}/automation/home-ops/scripts/taskfiles/keepassxc.yaml"
        dir: "{{.XDG_DATA_HOME}}/automation/home-ops/scripts/taskfiles"

tasks:
  lint:
    desc: Run all linters
    cmd: gts lint $(fd --glob '*.mts' --exclude 'playwright.config.mts' --exclude 'dist/**/*' --exclude 'node_modules/**/*')

  lint:fixall:
    desc: Fix all linting errors
    cmds:
      - gts fix $(fd --glob '*.mts' --exclude 'dist/**/*' --exclude 'node_modules/**/*')

  nx:show:
    desc: Show the available nx commands
    silent: true
    cmds:
      - npx nx show projects --affected

  nx:gen-pyapp:
    desc: Generate a new python application for the home-ops repo
    cmds:
      - |
        # Confirm that the project name is provided
        retVal=$(gum input --prompt="Please provide the python application name to generate: " --placeholder="app name")

        npx nx generate @nxlv/poetry-project "${retVal}" --directory="pyapps/${retVal}" --linter=ruff \
        --unitTestRunner=pytest --projectNameAndRootFormat=as-provided
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"
#
#  nx:gen-pylib:
#    desc: Generate a new python library for the home-ops repo
