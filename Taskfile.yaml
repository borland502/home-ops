# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

dotenv:
  - ${HOME}/.env
  - ${HOME}/.zshrc
  - ${HOME}/.zshenv

env:
  HOME_OPS_DIR: "{{.xdg_config_home}}/automation/home-ops"
vars:
  SCRIPTS:
    sh: fd --glob --full-path '{{.HOME_OPS_DIR}}/scripts/*'

# This high level taskfile is used control the development of home-ops.  On deploy a global taskfile
# is used to run the applications and scripts in the users home directory.  These subordinate taskfiles
# are symlinked to the xdg config directory
includes:
  # Build taskfiles
  scripts:
    internal: true
    taskfile: "./scripts/scripts.yaml"
  pya:
    internal: true
    taskfile: "./pyapps/pyapps.yaml"

  # Ops taskfiles
  ansible:
    internal: true
    taskfile: "./scripts/taskfiles/ansible.yaml"
  chez:
    internal: true
    taskfile: "./scripts/taskfiles/chezmoi.yaml"
  kp:
    internal: true
    taskfile: "./scripts/taskfiles/keepassxc.yaml"
  validate:
    internal: true
    taskfile: "./scripts/taskfiles/validate.yaml"
  install:
    internal: true
    taskfile: "./scripts/taskfiles/install.yaml"
  git:
    internal: true
    taskfile: "./scripts/taskfiles/git.yaml"
  unison:
    internal: true
    taskfile: "./scripts/taskfiles/unison.yaml"

tasks:
  nx:show:
    desc: Show the available nx commands
    run: once
    silent: true
    cmds:
      - npx nx show projects --affected

  deploy:local:
    desc: Deploy the applications locally
    cmds:
      - task: scripts:deploy

  lint:
    desc: Lint all the projects
    run: once
    summary: |
      This task lints all the projects locally
    cmds:
      - npm run lint:all -- --fix
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  install:
    desc: Install all the projects
    run: once
    summary: |
      This task installs all npm/poetry packages
    cmds:
      - npm install
      - task: pya:install
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  build:
    run: once
    deps:
      - task: lint
      - task: install
    desc: Build all the projects
    summary: |
      This task builds all the projects locally
    cmds:
      - npm run build:all
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  test:
    run: once
    desc: Test all the projects
    deps:
      - task: lint
      - task: build
    summary: |
      This task tests all the projects locally
    cmds:
      - npm run test:all
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  test:functional:
    run: once
    desc: Test Home Ops Using Proxmox and Ansible
    deps:
      - task: mcv:unpack
    cmds:
      - task: pya:ans:run
        vars:
            CLI_ARGS: "create-lxc"
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  sync:
    desc: Sync all the projects
    run: once
    summary: |
      This task runs all synchronization tasks
    cmds:
      - task: chez:sync
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  mcv:pack:
    desc: Pack all the projects
    summary: |
      This task packs all the projects locally
    deps:
      - task: validate:internal:xdg
      - task: validate:internal:scripts
      - task: install:npm
      - task: install:python
      - task: install:brew
    cmds:
      - task: pya:tk:run
        vars:
            CLI_ARGS: "pack"
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"

  mcv:unpack:
    desc: Deploy all the system and home directory projects
    summary: |
      This task verifies, configures, and deploys projects locally much like a [Mobile Construction Vehicle](https://cnc.fandom.com/wiki/Mobile_construction_vehicle)
    deps:
      - task: install:npm
      - task: install:python
      - task: install:brew
      - task: validate:internal:xdg
      - task: validate:internal:scripts
    cmds:
      - task: chez:sync
      - task: deploy:local

  pyapp:create:
    desc: Create a new Python application
    summary: |
      This task creates a new Python application
    cmds:
      - >-
        npx nx generate @nxlv/python:poetry-project {{.PROJ_NAME}} --projectType application --packageName {{.PROJ_NAME}}
        --directory pyapps/{{.PROJ_NAME}} --moduleName {{.MODULE_NAME}}  --pyprojectPythonDependency '>=3.12'
        --linter ruff --projectNameAndRootFormat as-provided
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Project Name')"
      MODULE_NAME:
        sh: "echo $(gum input --placeholder 'Module Name: Usually the same as the project name with an underscore')"

  pylib:create:
    desc: Create a new Python library
    summary: |
      This task creates a new Python library
    cmds:
      - >-
        npx nx generate @nxlv/python:poetry-project {{.PROJ_NAME}} --projectType library --packageName {{.PROJ_NAME}}
        --directory pylibs/{{.PROJ_NAME}} --moduleName {{.MODULE_NAME}}  --pyprojectPythonDependency '>=3.12'
        --linter ruff --projectNameAndRootFormat as-provided
    dir: "{{.XDG_DATA_HOME}}/automation/home-ops"
    vars:
      PROJ_NAME:
        sh: "echo $(gum input --placeholder 'Library Name')"
      MODULE_NAME:
        sh: "echo $(gum input --placeholder 'Module Name: Usually the same as the library name with an underscore')"
