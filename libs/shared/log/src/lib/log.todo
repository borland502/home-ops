import { Chalk } from 'chalk';
import config from 'config';
import { debug, error, info, trace, warn } from './log';

jest.mock('config');
jest.mock('chalk');

describe('log', () => {
  const mockConsoleDebug = jest.spyOn(console, 'debug');
  const mockConsoleInfo = jest.spyOn(console, 'info');
  const mockConsoleWarn = jest.spyOn(console, 'warn');
  const mockConsoleError = jest.spyOn(console, 'error');
  const mockConsoleTrace = jest.spyOn(console, 'trace');

  beforeEach(() => {
    jest.clearAllMocks();
    (Chalk as jest.Mock).mockImplementation(() => ({
      hex: jest
        .fn()
        .mockImplementation(
          (color: string) => (msg: string) => `${color}${msg}`
        ),
    }));
    (config.get as jest.Mock).mockImplementation(
      (key: string) => `color-${key}`
    );
  });

  it('should log debug messages with the correct color', () => {
    debug('Debug message');
    expect(mockConsoleDebug).toHaveBeenCalledWith(
      'color-colors.blueDebug message'
    );
  });

  it('should log info messages with the correct color', () => {
    info('Info message');
    expect(mockConsoleInfo).toHaveBeenCalledWith(
      'color-colors.purpleInfo message'
    );
  });

  it('should log warn messages with the correct color', () => {
    warn('Warn message');
    expect(mockConsoleWarn).toHaveBeenCalledWith(
      'color-colors.orangeWarn message'
    );
  });

  it('should log error messages with the correct color', () => {
    error('Error message');
    expect(mockConsoleError).toHaveBeenCalledWith(
      'color-colors.redError message'
    );
  });

  it('should log trace messages with the correct color', () => {
    trace('Trace message');
    expect(mockConsoleTrace).toHaveBeenCalledWith(
      'color-colors.yellowTrace message'
    );
  });
});
